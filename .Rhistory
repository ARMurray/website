CO2_2$Time <- as.POSIXct(table$TIMESTAMP)
colnames(CO2_2) <- c("PPM","ID","Sensor","Time")
CO2_2_Base <- CO2_2[1145:1385,]
CO2_2_Base <- mean(CO2_2_Base$PPM)
CO2_2$PPM_Adj <- CO2_2$PPM-CO2_2_Base
loessCO2_2 <- loess(PPM ~ ID, data = CO2_2, span = .05)
CO2_2$Smooth <- predict(loessCO2_2)
CO2_2$SmoothAdj <- CO2_2$Smooth - CO2_2_Base
CO2_2$Dist <- 47
CO2_3 <- data.frame(table$CO2_3_PPM)
CO2_3$ID <- rownames(CO2_3)
CO2_3$Sensor <- "Sensor 3"
CO2_3$Time <- as.POSIXct(table$TIMESTAMP)
colnames(CO2_3) <- c("PPM","ID","Sensor","Time")
CO2_3_Base <- CO2_3[1145:1385,]
CO2_3_Base <- mean(CO2_3_Base$PPM)
CO2_3$PPM_Adj <- CO2_3$PPM-CO2_3_Base
loessCO2_3 <- loess(PPM ~ ID, data = CO2_3, span = .05)
CO2_3$Smooth <- predict(loessCO2_3)
CO2_3$SmoothAdj <- CO2_3$Smooth - CO2_3_Base
CO2_3$Dist <- 76
CO2_4 <- data.frame(table$CO2_4_PPM)
CO2_4$ID <- rownames(CO2_4)
CO2_4$Sensor <- "Sensor 4"
CO2_4$Time <- as.POSIXct(table$TIMESTAMP)
colnames(CO2_4) <- c("PPM","ID","Sensor","Time")
CO2_4_Base <- CO2_4[1145:1385,]
CO2_4_Base <- mean(CO2_4_Base$PPM)
CO2_4$PPM_Adj <- CO2_4$PPM-CO2_4_Base
loessCO2_4 <- loess(PPM ~ ID, data = CO2_4, span = .05)
CO2_4$Smooth <- predict(loessCO2_4)
CO2_4$SmoothAdj <- CO2_4$Smooth - CO2_4_Base
CO2_4$Dist <- 100
#CO2_Eos <- data.frame(table$CO2_Eos_PPM)
#CO2_Eos$Sensor <- "EOS Sensor"
#CO2_Eos$Time <- as.POSIXct(table$TIMESTAMP)
#colnames(CO2_Eos) <- c("PPM","Sensor", "Time")
CO2_All <- rbind(CO2_1,CO2_2,CO2_3,CO2_4)
#Simple CO2 plot with lines
lines <- ggplot(CO2_All, aes(x=Time, y=PPM, group=Sensor, colour = Sensor))+geom_line()+
ggtitle("In-Stream CO2 (Unadjusted)")+
theme(axis.text.y = element_text(size = 14),
axis.title.y = element_text(size=18),
axis.text.x = element_text(size = 14),
axis.title.x = element_text(size=18),
plot.title = element_text(size=20))
lines
lines_adj <- ggplot(CO2_All, aes(x=Time, y=PPM_Adj, group=Sensor, colour = Sensor))+geom_line(size=1)+
ggtitle("Baseline Adjusted CO2")+
ylab("PPM Above Baseline")+
theme(axis.text.y = element_text(size = 14),
axis.title.y = element_text(size=18),
axis.text.x = element_text(size = 14),
axis.title.x = element_text(size=18),
plot.title = element_text(size=20))
lines_adj
flux <- data.frame(as.POSIXct(table$TIMESTAMP))
flux$flux <- table$Flux_Eos_umol
colnames(flux) <- c('time','flux')
flux_lines <- ggplot(flux, aes(x=time, y=flux, group=1))+geom_line(colour = '#4B9CD3',size=1)+
ggtitle("Flux")+
ylab(expression(mu ~ moles ~ m^{-2} ~ s^{-1}))+
theme(axis.text.y = element_text(size = 14),
axis.title.y = element_text(size=18),
axis.text.x = element_text(size = 14),
axis.title.x = element_text(size=18),
plot.title = element_text(size=20))
flux_lines
loessCO2_1 <- loess(PPM ~ ID, data = CO2_1, span = .05)
CO2_1$Smooth <- predict(loessCO2_1)
testplot <- ggplot(CO2_1)+
geom_line(aes(x = Time, y = PPM), colour = 'red')+
geom_line(aes(x = Time, y = Smooth))
testplot
smoothLines <- ggplot(CO2_All)+
geom_line(aes(x=Time, y=PPM, group = Sensor, colour=Sensor))+
geom_line(aes(x=Time, y=Smooth, group = Sensor), colour = 'black')
smoothLines
smoothAdjLines <- ggplot(CO2_All)+
geom_line(aes(x = Time, y=SmoothAdj, group = Sensor, colour = Sensor))
smoothAdjLines
df <- data.frame(Sensor = c("S1","S2","S3","S4"), Peak1 = c(0,11,10,12), Peak2 = c(0,10,8,15), Peak3 = c(0,11,12,11),Peak4 = c(0,10,9,12))
df
speeds <- df[2:4,]
speeds$Dist <- c(22,29,24)
speeds$Sensor <- c("S1 -> S2", "S2 -> S3", "S3 -> S4")
speeds$Peak1 <- speeds$Dist/(speeds$Peak1 * 60)
speeds$Peak2 <- speeds$Dist/(speeds$Peak2 * 60)
speeds$Peak3 <- speeds$Dist/(speeds$Peak3 * 60)
speeds$Peak4 <- speeds$Dist/(speeds$Peak4 * 60)
speeds
discharge <- read.csv("/Users/Andrew/Documents//carbon/discharge.csv")
discharge <- discharge [1:286,]
discharge$time <- as.POSIXct(discharge$DateTime, format='%m/%d/%Y %H:%M')
disPlot <- ggplot(data = discharge, aes(x = time, y = Discharge))+
geom_point()+
labs(title = "Discharge at Rodgers Road", y = "Discharge (m/s)")
disPlot
discharge$ID <- rownames(discharge)
loessDischarge <- loess(Discharge ~ ID, data = discharge, span = .05)
discharge$Smooth <- predict(loessDischarge)
disPlotSmooth <- ggplot(discharge, aes(x=time, y=Smooth))+
geom_line()
disPlotSmooth
# Subset Sensor 1
Sensor1 <- CO2_All%>%
filter(Sensor == "Sensor 1")
Sensor1 <- merge(Sensor1, discharge, by.x = 'Time', by.y = 'time', all.x = TRUE)
Sensor1 <- Sensor1[5:nrow(Sensor1),]
# Get the first discharge rating and assign it to a variable for use in the loop
firstRow <- Sensor1[1,]
lastVal <- firstRow$Discharge
#create empty data fram to write results to
fillDischarge <- data.frame()
# This loop checks to see if there is discharge data for each CO2 reading. If there is no
# discharge data, it automatically assigns the last discharge reading it had. If there is
# discharge data, it assigns the new data to the last know discharge reading to be used with
# the next CO2 data point that has no discharge data.
for(r in 1:nrow(Sensor1)){
row <- Sensor1[r,]
if(is.na(row$Discharge)){
estDischarge <- lastVal
} else {
lastVal <- row$Discharge
estDischarge <- row$Discharge
}
new <- data.frame("time"=row$Time, "Discharge"=estDischarge)
fillDischarge <- rbind(fillDischarge, new)
}
Sensor1_upd <- merge(Sensor1, fillDischarge, by.x = 'Time', by.y = 'time')%>%
select(-ID.x,-DateTime,-Discharge.x,-ID.y,-Smooth.y)
#Add Discharge to other sensor subsets
# Subset Sensor 2
Sensor2 <- CO2_All%>%
filter(Sensor == "Sensor 2")
Sensor2 <- merge(Sensor2, Sensor1_upd, by='Time')%>%
select(-PPM.y,-Sensor.y,-PPM_Adj.y,-SmoothAdj.y,-Dist.y,-Smooth.x,-ID)
# Subset Sensor 3
Sensor3 <- CO2_All%>%
filter(Sensor == "Sensor 3")
Sensor3 <- merge(Sensor3, Sensor1_upd, by='Time')%>%
select(-PPM.y,-Sensor.y,-PPM_Adj.y,-SmoothAdj.y,-Dist.y,-Smooth.x,-ID)
# Subset Sensor 4
Sensor4 <- CO2_All%>%
filter(Sensor == "Sensor 4")
Sensor4 <- merge(Sensor4, Sensor1_upd, by='Time')%>%
select(-PPM.y,-Sensor.y,-PPM_Adj.y,-SmoothAdj.y,-Dist.y,-Smooth.x,-ID)
colnames(Sensor1_upd) <- c('Time','PPM','Sensor','PPM_Adj','Smooth','Smooth_Adj','Dist','Discharge')
colnames(Sensor2) <- c('Time','PPM','Sensor','PPM_Adj','Smooth','Smooth_Adj','Dist','Discharge')
colnames(Sensor3) <- c('Time','PPM','Sensor','PPM_Adj','Smooth','Smooth_Adj','Dist','Discharge')
colnames(Sensor4) <- c('Time','PPM','Sensor','PPM_Adj','Smooth','Smooth_Adj','Dist','Discharge')
# mean flow rate from sensor 1 -> sensor 2
value <- c(speeds$Peak1[1],speeds$Peak2[1],speeds$Peak3[1],speeds$Peak4[1])
Sensor2$Speed <- mean(value)
mean(value)
# mean flow rate from sensor 2 -> sensor 3
value <- c(speeds$Peak1[2],speeds$Peak2[2],speeds$Peak3[2],speeds$Peak4[2])
Sensor3$Speed <- mean(value)
mean(value)
# mean flow rate from sensor 3 -> sensor 4
value <- c(speeds$Peak1[3],speeds$Peak2[3],speeds$Peak3[3],speeds$Peak4[3])
Sensor4$Speed <- mean(value)
mean(value)
widths <- c(3.25,3.4,3.3,3,1.55,1.38,.85,1.4,1.3,2,2.7,2.2,1.9,2.8,2.7,2.7,2.7,1,1.1,1.7,2,2.5,2.2,2.2,2.6,2.7,3.25,2.8,2.5,2.2,2.2,2.5,1.6,1.2)
dists <- c(0,3,6,10,12,15,18,19,21,24,25,29,33,35,42,47,51,52,54,57,59,64,66,69,73,76,81,84,88,92,95,98,99,100)
tbl <- data.frame(dists)
tbl$widths <- widths
tbl$widthcm <- tbl$widths*100
# Add in Vaisalla CO2 Sensor Locations
X <- c(25,47,76,100)
sensors <- data.frame(X)
sensors$Y <- c(270/2,270/2,270/2,60)
sensors$Sensor <- "Vaisalla"
# Add in eosFD Flux Sensor location
X <- 64
Y <- 250/2
eosFD <- data.frame(X,Y)
eosFD$Sensor <- "eosFD"
sensors <- rbind(sensors, eosFD)
loessbank <- loess(widthcm~dists, data = tbl, span = .3)
tbl$Smooth <- predict(loessbank)
plot <- ggplot(tbl, aes(x=dists, y = Smooth))+
geom_line(aes(y=Smooth))+
geom_ribbon(data=tbl, aes(ymin = 0, ymax = Smooth) ,fill="blue", alpha=".8")+
geom_point(data = sensors, aes(x = X, y = Y, shape = Sensor, colour = Sensor), size = 5)+
xlab("Downstream Distance (m)")+ ylab("Stream Width (cm)")+
theme(panel.background = element_rect(fill = "#499122",
size = 0.5, linetype = "solid"))+
scale_color_manual(values=c("#ff45e0", "#E69F00"))
plot
sub1_2 <- tbl[11:16,]
plot1 <- ggplot(sub1_2, aes(x=dists, y = Smooth))+
geom_line(aes(y=Smooth))+
geom_ribbon(data=sub1_2, aes(ymin = 0, ymax = Smooth) ,fill="blue", alpha=".8")+
geom_point(data = sensors[1:2,], aes(x = X, y = Y, shape = Sensor, colour = Sensor), size = 5)+
labs(title = "Sensor 1 -> Sensor 2", x="Downstream Distance (m)", y = "Stream Width (cm)")+
theme(panel.background = element_rect(fill = "#499122",
size = 0.5, linetype = "solid"))+
scale_color_manual(values=c("#ff45e0", "#E69F00"))
plot1
surfArea <- (max(sub1_2$dists)-min(sub1_2$dists)) * mean(sub1_2$widths)
Sensor2$Area <- surfArea
surfArea
Sensor2$AvgDepth <- (Sensor2$Discharge / Sensor2$Speed) / mean(sub1_2$widths)
Sensor2$Volume <- Sensor2$Area * Sensor2$AvgDepth
volPlot1 <- ggplot(Sensor2, aes(x = Time, y = Volume))+
geom_point()+
labs(title = "Water Volume Between Sensor 1 and 2", y = expression(paste("Volume ", m^{3})), y = expression(paste("Volume ", m^{3})))
volPlot1
sub2_3 <- tbl[16:26,]
sub3_4 <- tbl[26:34,]
Sensor3$Area <- (max(sub2_3$dists)-min(sub2_3$dists)) * mean(sub2_3$widths)
Sensor4$Area <- (max(sub3_4$dists)-min(sub3_4$dists)) * mean(sub3_4$widths)
Sensor3$AvgDepth <- (Sensor3$Discharge / Sensor3$Speed) / mean(sub2_3$widths)
Sensor3$Volume <- Sensor3$Area * Sensor3$AvgDepth
Sensor4$AvgDepth <- (Sensor4$Discharge / Sensor4$Speed) / mean(sub3_4$widths)
Sensor4$Volume <- Sensor4$Area * Sensor4$AvgDepth
Sensor2$CO2_MassGrams <- (Sensor2$Smooth_Adj * (44.01/22.71108)) * Sensor2$Volume
Sensor2$CO2_microMoles <- (Sensor2$CO2_MassGrams / 44.01) * 1000000
Sensor3$CO2_MassGrams <- (Sensor3$Smooth_Adj * (44.01/22.71108)) * Sensor3$Volume
Sensor3$CO2_microMoles <- (Sensor3$CO2_MassGrams / 44.01) * 1000000
Sensor4$CO2_MassGrams <- (Sensor4$Smooth_Adj * (44.01/22.71108)) * Sensor4$Volume
Sensor4$CO2_microMoles <- (Sensor4$CO2_MassGrams / 44.01) * 1000000
Sensor3$TimeAdjust <- as.POSIXct(Sensor3$Time - 660)
Sensor4$TimeAdjust <- as.POSIXct(Sensor4$Time - 600)
Sensor2_Sub <- data.frame("Time" = Sensor2$Time, "S2 uMoles" = Sensor2$CO2_microMoles, "Area12"=Sensor2$Area)
Sensor3_Sub <- data.frame("Time" = Sensor3$TimeAdjust, "S3 uMoles" = Sensor3$CO2_microMoles, "Area23"=Sensor3$Area)
Sensor4_Sub <- data.frame("Time" = Sensor4$TimeAdjust, "S4 uMoles" = Sensor4$CO2_microMoles, "Area34"=Sensor4$Area)
merge1 <- merge(Sensor2_Sub, Sensor3_Sub)
Flux <- merge(merge1, Sensor4_Sub)
Flux$S12_S23 <- ((Flux$S2.uMoles/Flux$Area12 - Flux$S3.uMoles/Flux$Area23) / 60) *-1
Flux$S23_S34 <- ((Flux$S3.uMoles/Flux$Area23 - Flux$S4.uMoles/Flux$Area34) / 60) *-1
plot <- ggplot(Flux)+
geom_point(aes(x= Time, y=S12_S23, color = 'Sensors 1,2 -> 2,3'))+
geom_point(aes(x= Time, y=S23_S34, color = 'Sensors 2,3 -> 3,4'))+
guides(color=guide_legend(title="Sensor Pair"))
plot
library(plotly)
ggplotly(smoothAdjLines)
table <- read.csv("~/Documents/Geog_803/NC_Soybeans_BU_ACRE.csv")%>%
select(Value, County, Year)%>%
dplyr::filter(County == "ALAMANCE")
table$Pounds <- table$Value*60
plot <- ggplot(data = table, aes(x=Year, y=Pounds))+
geom_line(aes(group = County))+
guides(color=FALSE)+
labs(x="Year", y="Pounds per Acre")
plot
table <- read.csv("~/Documents/Geog_803/NC_Soybeans_BU_ACRE.csv")%>%
table$Pounds <- table$Value*60
plot <- ggplot(data = table, aes(x=Year, y=Pounds))+
geom_point(aes(group = County))+
guides(color=FALSE)+
labs(x="Year", y="Pounds per Acre")
plot
table <- read.csv("~/Documents/Geog_803/NC_Soybeans_BU_ACRE.csv")%>%
select(Value, County, Year)
table$Pounds <- table$Value*60
plot <- ggplot(data = table, aes(x=Year, y=Pounds))+
geom_point(aes(group = County))+
guides(color=FALSE)+
labs(x="Year", y="Pounds per Acre")
plot
knitr::opts_chunk$set(echo = TRUE)
library(rgdal)
library(sf)
library(dplyr)
library(ggplot2)
library(stplanr)
install.packages('stplanr')
library(prism)
get_prism_annual('ppt', years = 1987:2017)
get_prism_monthlys('ppt', years = 1987:2017)
?get_prism_monthlys
get_prism_monthlys('ppt', years = 1987:2017, mon = 1:12)
get_prism_annual('ppt', years = 1987:2017)
?list.files
list.files(path = ~/Documents/Geog_803/prism/, pattern = '.bil')
list.files(path = "~/Documents/Geog_803/prism/", pattern = '.bil')
list.files(path = "~/Documents/Geog_803/prism/", pattern = '.bil', recursive = TRUE)
list.files(path = "~/Documents/Geog_803/prism/", pattern = 'bil.bil', recursive = TRUE)
# Get list of Prism files
list <- list.files(path = "~/Documents/Geog_803/prism/", pattern = 'bil.bil', recursive = TRUE)
files <- data.frame()
length(list)
list[4]
?substr
nchar(list[4])
nchar(list[6])
for(n in 1:length(list)){
record <- list[n]
ext <- substr(record,72,75)
print(ext)
}
for(n in 1:length(list)){
record <- list[n]
ext <- substr(record,72,75)
if(ext != ".xml"){
files <- rbind(files,record)
}
}
files
files <- []
files <- character(length = 0)
for(n in 1:length(list)){
record <- list[n]
ext <- substr(record,72,75)
if(ext != ".xml"){
files <- append(files,record)
}
}
files
substr(files[5],10,15)
substr(files[5],30,50)
substr(files[5],55,65)
substr(files[5],56,60)
substr(files[5],56,59)
?raster
for(n in 1:length(files)){
filename <- files[n]
year <- substr(files[n],56,59)
object <- paste0("prism_ppt_",year)
object <- raster(filename)
}
library(raster)
for(n in 1:length(files)){
filename <- files[n]
year <- substr(files[n],56,59)
object <- paste0("prism_ppt_",year)
object <- raster(filename)
}
filename
for(n in 1:length(files)){
filename <- paste0("~/Documents/Geog_803/prism/",files[n])
year <- substr(files[n],56,59)
object <- paste0("prism_ppt_",year)
object <- raster(filename)
}
for(n in 1:length(files)){
filename <- paste0("~/Documents/Geog_803/prism/",files[n])
year <- substr(files[n],56,59)
#object <- paste0("prism_ppt_",year)
paste0("prism_ppt_",year) <- raster(filename)
}
plot(object)
# Get list of Prism files
list <- list.files(path = "~/Documents/Geog_803/prism/", pattern = '.bil$', recursive = TRUE)
list
for(n in 1:length(files)){
filename <- paste0("~/Documents/Geog_803/prism/",files[n])
year <- substr(files[n],56,59)
object <- paste0("prism_ppt_",year)
object <- raster(filename)
}
?lapply
object <- paste0("prism_ppt_",year)
for(n in 1:length(files)){
filename <- paste0("~/Documents/Geog_803/prism/",files[n])
year <- substr(files[n],56,59)
object <- paste0("prism_ppt_",year)
lapply(object,raster(filename))
}
# Get list of Prism files
list <- paste0("~/Documents/Geog_803/prism/",list.files(path = "~/Documents/Geog_803/prism/", pattern = '.bil$', recursive = TRUE))
list
lapply(list,raster())
?raster
lapply(list,raster(x))
lapply(list,raster(list))
lapply(item,raster(list))
?lapply
lapply(list,raster)
list
prism_2017 <- raster(list[31])
plot(prism_2017)
US_Counties <- st_read("~/Documents/Geog_803/shapefiles/US_county_2010.shp")
View(US_Counties)
head(US_Counties)
SE_Counties <- US_Counties%>%
select(STATEFP10 == "37"|STATEFP10 == "13"|STATEFP10 == "45"|STATEFP10 == "51")
SE_Counties <- US_Counties%>%
dplyr::select(STATEFP10 == "37"|STATEFP10 == "13"|STATEFP10 == "45"|STATEFP10 == "51")
SE_Counties <- US_Counties%>%
dplyr::select(STATEFP10 == "37"| STATEFP10 == "13"| STATEFP10 == "45"| STATEFP10 == "51")
SE_Counties <- US_Counties%>%
dplyr::filter(STATEFP10 == "37"| STATEFP10 == "13"| STATEFP10 == "45"| STATEFP10 == "51")
plot(st_geometry(SE_Counties))
plot(prism_2017)
plot(st_geometry(SE_Counties), add=TRUE)
ggplot(SE_Counties)+
geom_sf()
SE_Counties <- US_Counties%>%
dplyr::filter(STATEFP10 == "37"| STATEFP10 == "13"| STATEFP10 == "45"| STATEFP10 == "51")
plot(SE_Counties)
plot(st_geometry(SE_Counties))
library(prism)
library(raster)
library(dplyr)
# Get list of Prism files
list <- paste0("~/Documents/Geog_803/prism/",list.files(path = "~/Documents/Geog_803/prism/", pattern = '.bil$', recursive = TRUE))
US_Counties <- st_read("~/Documents/Geog_803/shapefiles/US_county_2010.shp")
SE_Counties <- US_Counties%>%
dplyr::filter(STATEFP10 == "37"| STATEFP10 == "13"| STATEFP10 == "45"| STATEFP10 == "51")
US_Counties <- st_read("~/Documents/Geog_803/shapefiles/US_county_2010.shp")
library(sf)
US_Counties <- st_read("~/Documents/Geog_803/shapefiles/US_county_2010.shp")
SE_Counties <- US_Counties%>%
dplyr::filter(STATEFP10 == "37"| STATEFP10 == "13"| STATEFP10 == "45"| STATEFP10 == "51")
prism_2017 <- raster(list[31])
plot(prism_2017)
plot(SE_Counties, add=TRUE)
plot(st_geometry(SE_Counties), add=TRUE)
try <- st_intersection(SE_Counties, prism_2017)
st_crs(SE_Counties)
# Get CRS code table
crs_data = rgdal::make_EPSG()
View(crs_data)
# Set Coordinate Reference System
st_set_crs(5070)
# Set Coordinate Reference System
st_set_crs(SE_Counties,5070)
prism_2017@crs
plot(prism_2017)
plot(SE_Counties, add=TRUE)
plot(SE_Counties)
plot(st_geometry(SE_Counties))
plot(st_geometry(SE_Counties))
plot(prism_2017, add=TRUE)
mask <- mask(prism_2017, SE_Counties)
# Reproject to UTM 17N
Counties <- st_transform(SE_Counties,26917)
?projectRaster
ppt <- projectRaster(prism_2017, prism_utm, crs = 26917)
ppt <- projectRaster(prism_2017, crs = 26917)
ppt <- projectRaster(prism_2017, crs = 26917)
install.packages('blogdown')
install.packages("blogdown")
install.packages("blogdown")
install.packages("blogdown")
install.packages("blogdown")
install.packages("blogdown")
install.packages("blogdown")
install.packages("blogdown")
install.packages("blogdown")
install.packages("blogdown")
install.packages("blogdown")
install.packages("blogdown")
install.packages("blogdown")
install.packages("blogdown")
install.packages("blogdown")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
knitr::opts_chunk$set(collapse = TRUE)
library(ggplot2)
table <- read.table("D:/OneDrive/OneDrive - University of North Carolina at Chapel Hill/website/data/LabTest09192018.csv",header = TRUE, skip = 0, sep = ",")
colnames(table) <- c('OID','TIMESTAMP','RECORD','CO2_1_avg','CO2_1_Min','CO2_1_Max','CO2_1_TMx','CO2_2_Avg','CO2_2_Max',
'CO2_2_TMx','CO2_2_Min','CO2_2_TMin','EOS_Flux_Avg','EOS_Flux_Max','EOS_Flux_TMx','EOS_Flux_Min',
'EOS_Flux_TMn','EOS_CO2_Avg','EOS_Temp_Avg','BattV_Avg','PTemp_C_Avg','Temp_C_Avg')
#Convert time to Posixct
table$time <- as.POSIXct(table$TIMESTAMP)
View(table)
class(table$TIMESTAMP)
#Convert time to Posixct
table$time <- as.POSIXct(as.character(table$TIMESTAMP))
substr(table$TIMESTAMP[1],3,6)
substr(table$TIMESTAMP[1],3,15)
substr(table$TIMESTAMP[1],11,15)
#Convert time to Posixct
table$time <- as.POSIXct(substr(table$TIMESTAMP[1],11,15))
?as.POSIXct
#Convert time to Posixct
table$time <- as.POSIXct(as.numeric(as.character(table$TIMESTAMP)))
#Convert time to Posixct
table$time <- as.POSIXct(as.numeric(as.character(table$TIMESTAMP)), origin = "9/19/2019")
#Convert time to Posixct
table$time <- as.POSIXct(as.numeric(as.character(table$TIMESTAMP)), origin = "9/19/2019 12:35")
#Convert time to Posixct
table$time <- as.POSIXct(as.numeric(as.character(table$TIMESTAMP)), origin = "09-19-2019 12:35")
#Convert time to Posixct
table$time <- as.POSIXct(as.numeric(as.character(table$TIMESTAMP)), origin = "12:35")
#Convert time to Posixct
table$time <- as.POSIXct(as.numeric(as.character(substr(table$TIMESTAMP,11,15))), origin = "12:35")
as.numeric(as.character(substr(table$TIMESTAMP,11,15)))
#Convert time to Posixct
table$time <- as.POSIXct(table$TIMESTAMP)
#Convert time to Posixct
table$time <- as.POSIXct(table$TIMESTAMP)
#Convert time to Posixct
table$time <- as.POSIXlt(table$TIMESTAMP)
#Convert time to Posixct
table$time <- as.POSIXct(table$TIMESTAMP,format='%d/%m/%Y %H:%M')
blogdown:::serve_site()
CO2_1$Time <- as.POSIXct(table$TIMESTAMP,format='%d/%m/%Y %H:%M')
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
library(blogdown)
blogdown::install_hugo()
blogdown:::serve_site()
blogdown:::serve_site()
install.packages('here')
here()
library(here)
here()
here("data","fair.csv")
attendance <- read.csv(paste0(here("data","fair.csv")))
attendance1 <- read.csv(here("data","fair.csv"))
install.packages('miceadds')
